<<<<<<< HEAD:.github/workflows/deploy-vault.yml
name: Deploy HashiCorp Vault to Minikube (CI/CD Pipeline)

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  build_and_deploy:
    #runs-on: ubuntu-latest  # Use an Ubuntu runner for the GitHub Actions workflow
    runs-on: self-hosted  # Use self hosted runner for the GitHub Actions workflow    

    env:
      JFROG_REGISTRY: "trial086vpt.jfrog.io"
      JFROG_REPO: "vault-repo"
      IMAGE_NAME: "vault-server"
      BASE_VERSION: "1.0"
      IMAGE_TAG: "${{ github.run_number }}-$(date +'%Y%m%d')"  # Append timestamp for better traceability
      K8S_NAMESPACE: "vault-deployment"
      K8S_DEPLOYMENT_NAME: "vault"

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up Minikube (Use for GA runner)
      #- name: Set up Minikube
      #  uses: medyagh/setup-minikube@v0.0.14
      #  with:
      #    driver: docker

      # Step 3: Verify Docker access
      - name: Verify Docker Access
        run: docker --version

      # Step 4: Set up Docker Buildx (for multi-platform builds)  (Use for GA runner)
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2

      # Step 5: Log in to JFrog Artifactory
      - name: Log in to JFrog Artifactory
        uses: docker/login-action@v2
        with:
          registry: ${{ env.JFROG_REGISTRY }}
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}
          


      # Step 6: Cache and Build Docker Image        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Build Docker Image
        run: |
          set -e  
          echo "Building Docker image..."
          docker build -t ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f docker/Dockerfile .
                
      # Step 7: Push Docker Image to JFrog Artifactory
      - name: Push Docker Image to JFrog Artifactory
        run: |
          echo "Pushing Docker image to JFrog Artifactory..."
          docker push ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 8: Pull and Verify Docker Image from Artifactory
      - name: Pull and Verify Docker Image
        run: |
          echo "Pulling Docker image from Artifactory for verification..."
          docker pull ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 9: Install Helm
      #- name: Install Helm
      #  run: |
      #    echo "Installing Helm..."
      #    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash


      # Step 10: Delete Older Docker Images from JFrog
      - name: Delete Older Docker Images from JFrog
        run: |
          echo "Deleting older images from JFrog..."
          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
            -X DELETE "https://${{ env.JFROG_REGISTRY }}/artifactory/api/docker/${{ env.JFROG_REPO }}/v2/${{ env.IMAGE_NAME }}/tags?olderThan=3d"
      

      - name: Check Helm and Kubectl Versions
        run: |
          kubectl version --client
          helm version
      
      #Step 11: Lint Helm Chart
      - name: Lint Helm Chart
        run: helm lint ./helm

      # cache depedencies
      - name: Cache Helm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.helm/cache
          key: helm-${{ runner.os }}-${{ hashFiles('**/Chart.yaml', '**/values.yaml') }}
          restore-keys: |
            helm-${{ runner.os }}-
      

      # Step 12: Prepare Namespace in Minikube
      - name: Create Namespace if Not Exists
        run: |
          echo "Preparing Kubernetes namespace..."
          kubectl get namespace ${{ env.K8S_NAMESPACE }} || kubectl create namespace ${{ env.K8S_NAMESPACE }}




      # Step 12: Load Image into Minikube   (Use for GA runner)
      #- name: Load Image into Minikube
      #  run: |
      #    echo "Loading Docker image into Minikube..."
      #    minikube image load ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 13: Dry Run Helm Deployment
      - name: Helm Dry Run
        run: |
          echo "Performing a dry-run for Vault Helm deployment..."
          helm upgrade --install vault ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set server.ha.enabled=true \
            --dry-run

      # Step 14: Install/Upgrade Vault using Helm in Minikube
      - name: Install/Upgrade Vault with Helm
        run: |
          echo "Deploying Vault using Helm..."
          helm upgrade --install vault ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set imagePullSecrets[0].name=jfrog-registry-secret \
            --set server.ha.enabled=true \
            --create-namespace \
            --wait --timeout 300s

      # Step 15: Verify Deployment & Check Pod Status
      - name: Check Deployment and Pod Status
        run: |
          echo "Checking deployment and pod health..."
          kubectl get all --namespace=${{ env.K8S_NAMESPACE }}
          kubectl describe deployment/${{ env.K8S_DEPLOYMENT_NAME }} --namespace=${{ env.K8S_NAMESPACE }}
          kubectl logs -l app.kubernetes.io/name=vault --namespace=${{ env.K8S_NAMESPACE }} --tail=50

      # Step 16: Verify Helm Chart Deployment
      - name: Verify Helm Chart Deployment
        run: |
          echo "Verifying Helm chart deployment..."
          helm status vault --namespace ${{ env.K8S_NAMESPACE }}

      # Step 17: Verify Vault Deployment with Port-Forwarding
      - name: Verify Vault Accessibility
        run: |
          echo "Checking Vault availability..."
          kubectl port-forward svc/vault --namespace=${{ env.K8S_NAMESPACE }} 8200:8200 &
          FORWARD_PID=$!
          sleep 5  
          curl -k https://localhost:8200/v1/sys/health || echo "Vault is not reachable!"
          kill $FORWARD_PID

          
        # Step 18: Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        run: |
          if helm list --namespace ${{ env.K8S_NAMESPACE }} | grep -q "vault"; then
            echo "Rolling back Vault deployment..."
            helm rollback vault --namespace ${{ env.K8S_NAMESPACE }}
          else
            echo "No existing Vault deployment to roll back."
=======
name: Deploy HashiCorp Vault to Minikube (CI/CD Pipeline)

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  build_and_deploy:
    #runs-on: ubuntu-latest  # Use an Ubuntu runner for the GitHub Actions workflow
    runs-on: self-hosted  # Use self hosted runner for the GitHub Actions workflow    

    env:
      JFROG_REGISTRY: "triald4lybb.jfrog.io"
      JFROG_REPO: "vault-repo"
      IMAGE_NAME: "vault-server"
      BASE_VERSION: "1.0"
      IMAGE_TAG: "${{ github.run_number }}-$(date +'%Y%m%d')"  # Append timestamp for better traceability
      K8S_NAMESPACE: "vault-deployment"
      K8S_DEPLOYMENT_NAME: "vault"

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up Minikube (Use for GA runner)
      #- name: Set up Minikube
      #  uses: medyagh/setup-minikube@v0.0.14
      #  with:
      #    driver: docker

      # Step 3: Verify Docker access
      - name: Verify Docker Access
        run: docker --version

      # Step 4: Set up Docker Buildx (for multi-platform builds)  (Use for GA runner)
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2

      # Step 5: Log in to JFrog Artifactory
      - name: Log in to JFrog Artifactory
        uses: docker/login-action@v2
        with:
          registry: ${{ env.JFROG_REGISTRY }}
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}
          


      # Step 6: Cache and Build Docker Image        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Build Docker Image
        run: |
          set -e  
          echo "Building Docker image..."
          docker build -t ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f docker/Dockerfile .
                
      # Step 7: Push Docker Image to JFrog Artifactory
      - name: Push Docker Image to JFrog Artifactory
        run: |
          echo "Pushing Docker image to JFrog Artifactory..."
          docker push ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 8: Pull and Verify Docker Image from Artifactory
      - name: Pull and Verify Docker Image
        run: |
          echo "Pulling Docker image from Artifactory for verification..."
          docker pull ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 9: Install Helm
      #- name: Install Helm
      #  run: |
      #    echo "Installing Helm..."
      #    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash


      # Step 10: Delete Older Docker Images from JFrog
      - name: Delete Older Docker Images from JFrog
        run: |
          echo "Deleting older images from JFrog..."
          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
            -X DELETE "https://${{ env.JFROG_REGISTRY }}/artifactory/api/docker/${{ env.JFROG_REPO }}/v2/${{ env.IMAGE_NAME }}/tags?olderThan=3d"
      

      - name: Check Helm and Kubectl Versions
        run: |
          kubectl version --client
          helm version
      
      #Step 11: Lint Helm Chart
      - name: Lint Helm Chart
        run: helm lint ./helm

      # cache depedencies
      - name: Cache Helm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.helm/cache
          key: helm-${{ runner.os }}-${{ hashFiles('**/Chart.yaml', '**/values.yaml') }}
          restore-keys: |
            helm-${{ runner.os }}-
      

      # Step 12: Prepare Namespace in Minikube
      - name: Create Namespace if Not Exists
        run: |
          echo "Preparing Kubernetes namespace..."
          kubectl get namespace ${{ env.K8S_NAMESPACE }} || kubectl create namespace ${{ env.K8S_NAMESPACE }}




      # Step 12: Load Image into Minikube   (Use for GA runner)
      #- name: Load Image into Minikube
      #  run: |
      #    echo "Loading Docker image into Minikube..."
      #    minikube image load ${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Step 13: Dry Run Helm Deployment
      - name: Helm Dry Run
        run: |
          echo "Performing a dry-run for Vault Helm deployment..."
          helm upgrade --install vault ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set server.ha.enabled=true \
            --dry-run

      # Step 14: Install/Upgrade Vault using Helm in Minikube
      - name: Install/Upgrade Vault with Helm
        run: |
          echo "Deploying Vault using Helm..."
          helm upgrade --install vault ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ env.JFROG_REGISTRY }}/${{ env.JFROG_REPO }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set imagePullSecrets[0].name=jfrog-registry-secret \
            --set server.ha.enabled=true \
            --create-namespace \
            --wait --timeout 300s

      # Step 15: Verify Deployment & Check Pod Status
      - name: Check Deployment and Pod Status
        run: |
          echo "Checking deployment and pod health..."
          kubectl get all --namespace=${{ env.K8S_NAMESPACE }}
          kubectl describe deployment/${{ env.K8S_DEPLOYMENT_NAME }} --namespace=${{ env.K8S_NAMESPACE }}
          kubectl logs -l app.kubernetes.io/name=vault --namespace=${{ env.K8S_NAMESPACE }} --tail=50

      # Step 16: Verify Helm Chart Deployment
      - name: Verify Helm Chart Deployment
        run: |
          echo "Verifying Helm chart deployment..."
          helm status vault --namespace ${{ env.K8S_NAMESPACE }}

      # Step 17: Verify Vault Deployment with Port-Forwarding
      - name: Verify Vault Accessibility
        run: |
          echo "Checking Vault availability..."
          kubectl port-forward svc/vault --namespace=${{ env.K8S_NAMESPACE }} 8200:8200 &
          FORWARD_PID=$!
          sleep 5  
          curl -k http://localhost:8200/v1/sys/health || echo "Vault is not reachable!"
          kill $FORWARD_PID

          
        # Step 18: Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        run: |
          if helm list --namespace ${{ env.K8S_NAMESPACE }} | grep -q "vault"; then
            echo "Rolling back Vault deployment..."
            helm rollback vault --namespace ${{ env.K8S_NAMESPACE }}
          else
            echo "No existing Vault deployment to roll back."
>>>>>>> upstream/main:.github/workflows/deploy-vault.yaml
          fi